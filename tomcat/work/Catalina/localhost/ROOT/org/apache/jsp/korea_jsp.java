/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.51
 * Generated at: 2020-06-30 00:12:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class korea_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("\t<meta name=\"Referrer\" content=\"origin\">\r\n");
      out.write("    <style>\r\n");
      out.write("        \r\n");
      out.write("\t\tsvg \r\n");
      out.write("\t\t{\r\n");
      out.write("            background-color: #a8daf7;\r\n");
      out.write("        }\r\n");
      out.write("        svg text \r\n");
      out.write("\t\t{\r\n");
      out.write("            pointer-events: none;\r\n");
      out.write("        }\r\n");
      out.write("        svg .province \r\n");
      out.write("\t\t{\r\n");
      out.write("            fill: #efefef;\r\n");
      out.write("            stroke: #ddd;\r\n");
      out.write("        }\r\n");
      out.write("        svg .province.c11 { fill: #ccc; }\r\n");
      out.write("        svg .province.c21 { fill: #dcd; }\r\n");
      out.write("        svg .province.c22 { fill: #cdd; }\r\n");
      out.write("        svg .province.c23 { fill: #ccd; }\r\n");
      out.write("        svg .province.c24 { fill: #cdc; }\r\n");
      out.write("        svg .province.c25 { fill: #dcc; }\r\n");
      out.write("        svg .province.c26 { fill: #ddc; }\r\n");
      out.write("        svg .province.c29 { fill: #ddc; }\r\n");
      out.write("        svg .province:hover \r\n");
      out.write("\t\t{\r\n");
      out.write("            opacity: 0.8;\r\n");
      out.write("        }\r\n");
      out.write("        svg .region-label \r\n");
      out.write("\t\t{\r\n");
      out.write("          fill: #777;\r\n");
      out.write("          font-size: 12px;\r\n");
      out.write("          font-weight: 300;\r\n");
      out.write("          text-anchor: middle;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("\t<table width=\"670\" align=\"center\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t    <div id=\"chart\"></div>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("    <script src=\"d3.v3.min.js\"></script>\r\n");
      out.write("    <script src=\"topojson.v1.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("\r\n");
      out.write("\t\tvar width  = 1000,\r\n");
      out.write("\t\t\theight = 1000;\r\n");
      out.write("\r\n");
      out.write("\t\tvar svg = d3.select(\"#chart\").append(\"svg\")\r\n");
      out.write("\t\t\t.attr(\"width\", width)\r\n");
      out.write("\t\t\t.attr(\"height\", height);\r\n");
      out.write("\r\n");
      out.write("\t\tvar map = svg.append(\"g\").attr(\"id\", \"map\"),\r\n");
      out.write("\t\t\tpoints = svg.append(\"g\").attr(\"id\", \"cities\");\r\n");
      out.write("\r\n");
      out.write("\t\tvar projection = d3.geo.mercator()\r\n");
      out.write("\t\t\t.center([128, 35.9])\r\n");
      out.write("\t\t\t.scale(30000)\r\n");
      out.write("\t\t\t.translate([width/2, height/2]);\r\n");
      out.write("\r\n");
      out.write("\t\tvar path = d3.geo.path().projection(projection);\r\n");
      out.write("\r\n");
      out.write("\t\td3.json(\"korea-topo.json\", function(error, data) \r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar features = topojson.feature(data, data.objects['korea']).features;\r\n");
      out.write("\r\n");
      out.write("\t\t\tmap.selectAll('path')\r\n");
      out.write("\t\t\t\t.data(features.filter(function(d)\r\n");
      out.write("\t\t\t\t{ \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif( d.properties.EMD_CD.indexOf(\"4571\") != 0)\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\treturn 0;\r\n");
      out.write("\t\t\t\t\t}else\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\treturn -1;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t))\r\n");
      out.write("\t\t\t\t.enter().append('path')\r\n");
      out.write("\t\t\t\t.attr('class', function(d) { return 'province c' + d.properties.code })\r\n");
      out.write("\t\t\t\t.attr('d', path)\r\n");
      out.write("\r\n");
      out.write("\t\t\tmap.selectAll(\"text\")\r\n");
      out.write("\t\t\t\t.data(features.filter(function(d)\r\n");
      out.write("\t\t\t\t{ \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif( d.properties.EMD_CD.indexOf(\"4571\") != 0)\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\treturn 0;\r\n");
      out.write("\t\t\t\t\t}else\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\treturn -1;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t//return d.properties.EMD_CD.indexOf(\"457\") === -1; \r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t))\r\n");
      out.write("\t\t\t\t.enter().append(\"text\")\r\n");
      out.write("\t\t\t\t.attr(\"transform\", function(d) { return \"translate(\" + path.centroid(d) + \")\"; })\r\n");
      out.write("\t\t\t\t.attr(\"dy\", \".35em\")\r\n");
      out.write("\t\t\t\t.attr(\"class\", \"region-label\")\r\n");
      out.write("\t\t\t\t.text(function(d) { return d.properties.EMD_KOR_NM; });\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
