/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.51
 * Generated at: 2020-06-17 01:12:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/dbopen.jsp", Long.valueOf(1592274878547L));
    _jspx_dependants.put("/dbclose.jsp", Long.valueOf(1592274567993L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

/* *****************************************************
*
*  데이터베이스 접속 정보 선언부 [ 시작 ]
*
***************************************************** */
//MySQL 연결을 위한 정보 설정
String     g_dbstring = "jdbc:mysql://127.0.0.1/ezen?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC";
String     g_user      = "root";
String     g_pass      = "mySQL1234";
/* *****************************************************
*
*  데이터베이스 접속 정보 선언부 [ 종료 ]
*
***************************************************** */


/* *****************************************************
*
*  데이터베이스 연결 처리
*
***************************************************** */
//MySQL 연결을 위한 라이브러리를 로딩한다.
//Class.forName("com.mysql.jdbc.Driver");  
//mysql-connector-java-8.0.18.jar 를 로딩한다.
try
{
	Class.forName("com.mysql.cj.jdbc.Driver");
}catch(Exception e)
{
	System.out.println("com.mysql.cj.jdbc.Driver 로딩 에러..");
	System.out.println("[ 오류 내용 ] ==================");
	e.printStackTrace();
	return;
}


//MySQL에 접속한다.
Connection mConnection;
try
{
	mConnection = DriverManager.getConnection( g_dbstring, g_user ,g_pass );
}catch(Exception e)
{
	System.out.println("MySQL 서버 접속 에러..");
	System.out.println("[ 오류 내용 ] ==================");
	e.printStackTrace();
	return;
}



      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');


int currentPage = 1;   //현재 페이지번호
int pageSize      = 7;  //페이지당 게시물 목록 갯수
int startRow      = 0;  //페이지 시작행 번호
int seqNo          = 0;  //페이지 목록에 연번
int count           = 0;  //전체 게시물 갯수
int maxPageNo  = 0; //최대 페이지 번호
String mKey  = request.getParameter("kw");
if(mKey == null)
{
	mKey = "";
}

String mTemp = request.getParameter("page");
if(mTemp != null)
{
	currentPage = Integer.parseInt(mTemp);
}

//시작행 번호 = (현재 페이지번호 - 1) * 페이지당 출력 할 갯수
startRow = (currentPage - 1) * pageSize;
seqNo     = startRow + 1;


//전체 게시물 갯수를 얻는다.
String mSQL = "select count(*) as count from board ";
if( !mKey.equals("") )
{
	mSQL += 	"where title like '%"  + mKey + "%' ";
}
System.out.println(mSQL);

PreparedStatement mState;
ResultSet                mResult;

mState  = mConnection.prepareStatement(mSQL,ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_UPDATABLE);
mResult = mState.executeQuery();
mResult.next();
count    =  Integer.parseInt(mResult.getString("count"));
mResult.close();
mState.close();

//최대 페이지 번호 계산
maxPageNo = count / pageSize;
if(  (count % pageSize) != 0)
{
	maxPageNo = maxPageNo + 1;
}

      out.write("\r\n");
      out.write("전체 게시물 갯수 : ");
      out.print( count );
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("현재 페이지 번호 : ");
      out.print( currentPage );
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("최대 페이지 번호 : ");
      out.print( maxPageNo );
      out.write("\r\n");
      out.write("<table border=\"1\" width=\"100%\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td width=\"90\">번호</td>\r\n");
      out.write("\t\t<td>제목</td>\r\n");
      out.write("\t</tr>\r\n");

try
{
	mSQL = "select no,title from board ";
	if( !mKey.equals("") )
	{
		mSQL += 	"where title like '%"  + mKey + "%' ";
	}
	mSQL +="order by no desc limit " + startRow + "," + pageSize + "  ";
	System.out.println(mSQL);

	mState  = mConnection.prepareStatement(mSQL,ResultSet.TYPE_SCROLL_INSENSITIVE,
																		ResultSet.CONCUR_UPDATABLE);
	mResult = mState.executeQuery();
	while(mResult.next())
	{
			String no    =  mResult.getString("no");
			String title  =  mResult.getString("title");
			
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( seqNo );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( title );
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");

			seqNo++;
	}
	mResult.close();
	mState.close();
}catch(Exception e)
{
	System.out.println("SQL 처리 오류");
	System.out.println("[ 오류 내용 ] ==================");
	e.printStackTrace();
	return;
}

      out.write("\r\n");
      out.write("</table>\r\n");

//페이징 시작 블럭 계산
int startBlock = ((currentPage / 5) * 5) + 1;
//페이징 종료 블럭 계산
int endBlock  = startBlock + 5;

//페이징 종료 블럭이 최대 페이지 번호보다 큰 경우 처리
if(endBlock > maxPageNo)
{
	endBlock = maxPageNo + 1;
}

if( currentPage > 5)
{
	
      out.write("\r\n");
      out.write("\t<a href=\"javascript:doGoPage(");
      out.print( startBlock - 5 );
      out.write(");\">[이전블럭]</a>\r\n");
      out.write("\t");

}
for(int i=startBlock;i<endBlock;i++)
{
	
      out.write("<a href=\"javascript:doGoPage(");
      out.print( i );
      out.write(");\">[");
      out.print( i );
      out.write("Page]</a> ");

}
if( currentPage < (maxPageNo - 5))
{
	
      out.write("\r\n");
      out.write("\t<a href=\"javascript:doGoPage(");
      out.print( endBlock );
      out.write(");\">[다음블럭]</a>\r\n");
      out.write("\t");

}

      out.write("\r\n");
      out.write("<script language=\"javascript\">\r\n");
      out.write("\t\r\n");
      out.write("\tfunction doGoPage(pageno)\r\n");
      out.write("\t{\r\n");
      out.write("\t\t\talert(pageno + \"로 이동합니다.\");\r\n");
      out.write("\r\n");
      out.write("\t\t\tdocument.pageForm.page.value = pageno;\r\n");
      out.write("\t\t\tdocument.pageForm.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<form id=\"pageForm\" name=\"pageForm\" method=\"post\" action=\"list.jsp\">\r\n");
      out.write("\t<input type=\"hidden\" id=\"page\" name=\"page\" value=\"\">\r\n");
      out.write("\t<input type=\"hidden\" id=\"kw\" name=\"kw\" value=\"");
      out.print( mKey );
      out.write("\">\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<form id=\"seach\" name=\"search\" method=\"get\" action=\"list.jsp\">\r\n");
      out.write("\t<input type=\"text\" id=\"kw\" name=\"kw\" value=\"");
      out.print( mKey );
      out.write("\">\r\n");
      out.write("\t<input type=\"submit\" value=\"검색\">\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');


/* *****************************************************
*
*  데이터베이스 연결 종료
*
***************************************************** */
//MySQL 접속을 종료한다.
mConnection.close();

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
